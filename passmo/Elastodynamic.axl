<?xml version="1.0" ?>
<module name="Elastodynamic" version="1.0">
  <description>Elastodynamic module</description>
  <variables>
    <variable field-name="acceleration" name="Acceleration" data-type="real3" item-kind="node" dim="0">
      <description>Acceleration vectors on node coords at current step</description>
    </variable>
    <variable field-name="velocity" name="Velocity" data-type="real3" item-kind="node" dim="0">
      <description>Velocity vectors on node coords at current step</description>
    </variable>
    <variable field-name="displacement" name="Displacement" data-type="real3" item-kind="node" dim="0">
      <description>Displacement vectors on node coords at current step</description>
    </variable>
    <variable field-name="prev_acceleration" name="PrevAcceleration" data-type="real3" item-kind="node" dim="0">
      <description>Acceleration vectors on node coords at previous step</description>
    </variable>
    <variable field-name="prev_velocity" name="PrevVelocity" data-type="real3" item-kind="node" dim="0">
      <description>Velocity vectors on node coords at previous step</description>
    </variable>
    <variable field-name="prev_displacement" name="PrevDisplacement" data-type="real3" item-kind="node" dim="0">
      <description>Displacement vectors on node coords at previous step</description>
    </variable>
    <variable field-name="force" name="Force" data-type="real3" item-kind="node" dim="0">
      <description>Force resultants on node coords</description>
    </variable>
    <variable field-name="node_has_imposed_displ" name="NodeHasImposedDispl" data-type="real3" item-kind="node" dim="0">
      <description>Vector values to indicate if node has imposed displacement: component = 1 if true, 0 otherwise </description>
    </variable>
    <variable field-name="node_has_imposed_vel" name="NodeHasImposedVel" data-type="real3" item-kind="node" dim="0">
      <description>Vector values to indicate if node has imposed velocity: component = 1 if true, 0 otherwise </description>
    </variable>
    <variable field-name="node_has_imposed_acc" name="NodeHasImposedAcc" data-type="real3" item-kind="node" dim="0">
      <description>Vector values to indicate if node has imposed acceleration: component = 1 if true, 0 otherwise </description>
    </variable>
    <variable field-name="node_has_imposed_force" name="NodeHasImposedForce" data-type="real3" item-kind="node" dim="0">
      <description>Vector values to indicate if node has imposed force: component = 1 if true, 0 otherwise </description>
    </variable>
    <variable field-name="node_coord" name="NodeCoord" data-type="real3" item-kind="node" dim="0">
      <description>NodeCoord from Arcane variable</description>
    </variable>
    <variable field-name="cell_strain" name="CellStrain" data-type="real3x3" item-kind="cell" dim="0">
      <description>Total strains per Cell</description>
    </variable>
    <variable field-name="cell_stress" name="CellStress" data-type="real3x3" item-kind="cell" dim="0">
      <description>Total stresses per Cell</description>
    </variable>
    <!-- - - - - - elastic properties - - - - -->
    <variable field-name="density" name="Density" data-type="real" item-kind="cell" dim="0">
      <description>Bulk density value per Cell</description>
    </variable>
    <variable field-name="young_modulus" name="YoungModulus" data-type="real" item-kind="cell" dim="0">
      <description>Young Modulus value per Cell</description>
    </variable>
    <variable field-name="poisson_ratio" name="PoissonRatio" data-type="real" item-kind="cell" dim="0">
      <description>Poisson Ratio value per Cell</description>
    </variable>
  </variables>

  <entry-points>
    <entry-point method-name="startInit" name="StartInit" where="start-init" property="none" />
    <entry-point method-name="compute" name="Compute" where="compute-loop" property="none" />
  </entry-points>

  <options>
    <simple name = "displacement-result-file" type = "string" default="displ-result.txt" optional = "true">
      <description>Filename containing the solution displacements</description>
    </simple>
    <simple name = "acceleration-result-file" type = "string" default="acc-result.txt" optional = "true">
      <description>Filename containing the solution accelerations</description>
    </simple>
    <simple name = "velocity-result-file" type = "string" default="vel-result.txt" optional = "true">
      <description>Filename containing the solution velocities</description>
    </simple>
    <simple name = "stress-result-file" type = "string" default="stress-result.txt" optional = "true">
      <description>Filename containing the solution stresses per Cell</description>
    </simple>
    <simple name = "strain-result-file" type = "string" default="strain-result.txt" optional = "true">
      <description>Filename containing the solution strains per Cell</description>
    </simple>
    <simple name = "init-stress-file" type = "string" default="init-stress.txt" optional = "true">
      <description>Filename containing the initial stresses for all cells</description>
    </simple>

    <!-- - - - - - boundary-condition - - - - -->
    <complex name="boundary-condition" type="BoundaryCondition" minOccurs="0" maxOccurs="unbounded">
      <description>Definition of Dirichlet boundary conditions</description>
        <enumeration name="type" type="TypesElastodynamic::eBoundaryCondition">
          <description>Type of boundary condition</description>
          <enumvalue genvalue="TypesElastodynamic::DisplacementX" name="Ux" />
          <enumvalue genvalue="TypesElastodynamic::DisplacementY" name="Uy" />
          <enumvalue genvalue="TypesElastodynamic::DisplacementZ" name="Uz" />
          <enumvalue genvalue="TypesElastodynamic::VelocityX" name="Vx" />
          <enumvalue genvalue="TypesElastodynamic::VelocityY" name="Vy" />
          <enumvalue genvalue="TypesElastodynamic::VelocityZ" name="Vz" />
          <enumvalue genvalue="TypesElastodynamic::AccelerationX" name="Ax" />
          <enumvalue genvalue="TypesElastodynamic::AccelerationY" name="Ay" />
          <enumvalue genvalue="TypesElastodynamic::AccelerationZ" name="Az" />
          <enumvalue genvalue="TypesElastodynamic::ForceX" name="Fx" />
          <enumvalue genvalue="TypesElastodynamic::ForceY" name="Fy" />
          <enumvalue genvalue="TypesElastodynamic::ForceZ" name="Fz" />
        </enumeration>
        <extended name="surface" type="Arcane::FaceGroup">
          <description>Surface on which to apply these boundary conditions</description>
        </extended>
        <extended name="node-group" type="Arcane::NodeGroup">
          <description>NodeGroup on which to apply these boundary conditions</description>
        </extended>
        <simple name="value" type="real">
          <description>Value of the component to impose</description>
        </simple>
    </complex>

    <!-- - - - - - input-motion - - - - -->
    <complex name="input-motion" type="InputMotion" minOccurs="0" maxOccurs="unbounded">
      <description>Definition of an input time history for nodal acceleration, velocity and/or displacement</description>
        <extended name="node-group" type="Arcane::NodeGroup">
          <description>NodeGroup on which the input motion will be applied</description>
        </extended>
        <simple name = "acceleration-input-file" type = "string" default="acc-input.txt" optional = "true">
          <description>Filename containing the input acceleration time history</description>
        </simple>
        <simple name = "displacement-input-file" type = "string" default="displ-input.txt" optional = "true">
          <description>Filename containing the input displacement time history</description>
        </simple>
        <simple name = "velocity-input-file" type = "string" default="vel-input.txt" optional = "true">
          <description>Filename containing the input velocity time history</description>
        </simple>
    </complex>

    <!-- - - - - - initial-node-condition - - - - -->
    <complex name="initial-node-condition" type="InitialNodeCondition" minOccurs="0" maxOccurs="unbounded">
      <description>Definition of initial node conditions</description>
        <enumeration name="type" type="TypesElastodynamic::eNodeCondition">
          <description>Type of boundary condition</description>
          <enumvalue genvalue="TypesElastodynamic::Displacement" name="Displ" />
          <enumvalue genvalue="TypesElastodynamic::Velocity" name="Vel" />
          <enumvalue genvalue="TypesElastodynamic::Acceleration" name="Acc" />
          <enumvalue genvalue="TypesElastodynamic::Force" name="Force" />
        </enumeration>
        <extended name="node-group" type="Arcane::NodeGroup">
          <description>NodeGroup on which initial node conditions will be applied</description>
        </extended>
        <simple name="values" type="real3" default="0." optional = "true">
          <description>Nodal vector values to initialize</description>
        </simple>
    </complex>

    <!-- - - - - - initial-cell-condition - - - - -->
    <complex name="initial-cell-condition" type="InitialCellCondition" minOccurs="0" maxOccurs="unbounded">
      <description>Definition of initial stresses or strains on Cell</description>
      <extended name="cell-group" type="Arcane::CellGroup">
        <description>CellGroup on which initial condition will be applied</description>
      </extended>
      <simple name="stress" type="real3" default="0." optional = "true">
        <description>Initial stress vector (xx yy zz) on Cell</description>
      </simple>
      <simple name="shear_stress" type="real3" default="0." optional = "true">
        <description>Initial shear stress vector (xy yz xz) on Cell</description>
      </simple>
      <simple name="strain" type="real3" default="0." optional = "true">
        <description>Initial strain vector (xx yy zz) on Cell</description>
      </simple>
      <simple name="shear_strain" type="real3" default="0." optional = "true">
        <description>Initial shear strain vector (xy yz xz) on Cell</description>
      </simple>
    </complex>

    <!-- - - - - - gauss-integration - - - - -->
    <complex name="gauss-integration" type="GaussIntegration" minOccurs="0" maxOccurs="unbounded">
      <description>Definition of Gauss-Legendre integration features on groups of cells</description>
        <enumeration name="type" type="TypesElastodynamic::eGaussIntegrationOrder">
          <description>Integration orders in local cell directions</description>
          <enumvalue genvalue="TypesElastodynamic::IntegOrder1" name="Nint1" />
          <enumvalue genvalue="TypesElastodynamic::IntegOrder2" name="Nint2" />
          <enumvalue genvalue="TypesElastodynamic::IntegOrder3" name="Nint3" />
        </enumeration>
      <extended name="cell-group" type="Arcane::CellGroup">
        <description>CellGroup on which these integration features will be applied</description>
      </extended>
      <simple name = "value" type = "integer" default="2" optional = "true">
        <description>Integration order value along the local cell direction </description>
      </simple>
    </complex>
      <simple name = "gauss_order1" type = "integer" default="2" optional = "true">
        <description>Integration order value along the 1st local cell direction </description>
      </simple>
      <simple name = "gauss_order2" type = "integer" default="2" optional = "true">
        <description>Integration order value along the 2nd local cell direction </description>
      </simple>
      <simple name = "gauss_order3" type = "integer" default="2" optional = "true">
        <description>Integration order value along the 3rd local cell direction </description>
      </simple>

    <!-- - - - - - analysis-type - - - - -->
    <enumeration name="analysis-type" type="TypesElastodynamic::eAnalysisType">
      <description>Type of analysis</description>
      <enumvalue genvalue="TypesElastodynamic::PlaneStrain" name="planestrain" />
      <enumvalue genvalue="TypesElastodynamic::PlaneStress" name="planestress" />
      <enumvalue genvalue="TypesElastodynamic::AxiSym" name="axisym" />
      <enumvalue genvalue="TypesElastodynamic::ThreeD" name="3D" />
    </enumeration>

    <simple name="start" type="real" default="0." optional="true">
      <description>Start time for simulation</description>
    </simple>
    <simple name="final-time" type="real">
      <description>Final time for simulation</description>
    </simple>
    <simple name="deltat" type="real">
      <description>Timestep value for simulation</description>
    </simple>
    <simple name="beta" type="real" default="0.25" optional="true">
      <description>Newmark Beta coefficient</description>
    </simple>
    <simple name="gamma" type="real" default="0.5" optional="true">
      <description>Newmark Gamma coefficient</description>
    </simple>
    <simple name="alfam" type="real" default="0." optional="true">
      <description>Coefficient related to mass terms in Newmark Generalized alfa-method</description>
    </simple>
    <simple name="alfaf" type="real" default="0." optional="true">
      <description>Coefficient related to force terms in Newmark Generalized alfa-method</description>
    </simple>
    <simple name="is_alfa_method" type="bool" default="false" optional="true">
      <description>Boolean which is true if Newmark Generalized alfa-method is used</description>
    </simple>
    <simple name="nb_dofs_per_node" type="integer" default="3" optional="true">
      <description>Number of dofs per node</description>
    </simple>
  </options>
</module>